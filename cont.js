// Seleciona o elemento HTML onde a contagem regressiva ser√° exibida
const countdownElement = document.getElementById('countdown');
// Seleciona o container onde os morcegos ser√£o adicionados
const batContainer = document.getElementById('bat-container');
// Seleciona o modal de mensagens e o texto dentro dele
const messageModal = document.getElementById('message-modal');
const modalText = document.getElementById('modal-text');

// ===============================================
// FUN√á√ÉO PARA EXIBIR MENSAGENS TEMPOR√ÅRIAS (substitui alert())
// ===============================================
function showMessage(message) {
    modalText.textContent = message; // Define o texto da mensagem
    messageModal.classList.add('show'); // Adiciona a classe 'show' para exibir o modal

    // Define um tempo para esconder o modal ap√≥s 3 segundos (tempo da anima√ß√£o fadeInOut)
    setTimeout(() => {
        messageModal.classList.remove('show'); // Remove a classe 'show' para esconder o modal
    }, 3000);
}


// ===============================================
// L√ìGICA DA CONTAGEM REGRESSIVA
// ===============================================
function updateCountdown() {
    const now = new Date(); // Pega a data e hora atuais
    // Define o dia 27 de Outubro. O m√™s √© 9 porque √© 0-indexado (Janeiro = 0, Outubro = 9)
    let targetYear = now.getFullYear(); // Come√ßa com o ano atual
    let targetDate = new Date(targetYear, 9, 31);

    // Se a data atual j√° passou de 31 de Outubro deste ano,
    // a contagem regressiva √© para 31 de Outubro do pr√≥ximo ano.
    if (now > targetDate) {
        targetYear++;
        targetDate.setFullYear(targetYear);
    }

    // Calcula a diferen√ßa de tempo em milissegundos
    const timeDifference = targetDate - now;

    // Se o tempo acabou (chegou o Halloween)
    if (timeDifference <= 0) {
        countdownElement.innerHTML = "√â Halloween! üéÉ"; // Mensagem de Halloween
        return; // Sai da fun√ß√£o
    }

    // Calcula dias, horas, minutos e segundos restantes
    const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

    // Atualiza o conte√∫do do elemento da contagem regressiva
    // Formata√ß√£o vertical com quebras de linha
    countdownElement.innerHTML = `
        <span>${days} Dias</span>
        <span>${hours} Horas</span>
        <span>${minutes} Minutos</span>
        <span>${seconds} Segundos</span>
    `;
}

// Atualiza a contagem regressiva a cada segundo (1000 milissegundos)
setInterval(updateCountdown, 1000);
// Chama a fun√ß√£o uma vez imediatamente para exibir a contagem ao carregar a p√°gina
updateCountdown();

// ===============================================
// L√ìGICA DA ANIMA√á√ÉO DOS MORCEGOS
// ===============================================
const numberOfBats = 8; // Define quantos morcegos aparecer√£o na tela

function createBat() {
    const bat = document.createElement('div'); // Cria um novo elemento div
    bat.classList.add('bat'); // Adiciona a classe 'bat' para aplicar o estilo CSS
    batContainer.appendChild(bat); // Adiciona o morcego ao container de morcegos

    // Define as posi√ß√µes iniciais e finais aleat√≥rias para o voo dos morcegos
    // Morcegos come√ßam fora da tela √† esquerda (-10 a -30vw) e terminam √† direita (110 a 130vw)
    const startX = -10 - (Math.random() * 20);
    const startY = Math.random() * 100; // Posi√ß√£o vertical aleat√≥ria (0 a 100vh)
    const endX = 110 + (Math.random() * 20);
    const endY = Math.random() * 100; // Posi√ß√£o vertical aleat√≥ria (0 a 100vh)

    // Define vari√°veis CSS personalizadas para cada morcego, permitindo anima√ß√µes variadas
    bat.style.setProperty('--start-x', startX);
    bat.style.setProperty('--start-y', startY);
    bat.style.setProperty('--end-x', endX);
    bat.style.setProperty('--end-y', endY);
    // Rota√ß√£o aleat√≥ria para dar mais naturalidade ao voo (-15 a 15 graus)
    bat.style.setProperty('--rotation', `${Math.random() * 30 - 15}deg`);
    // Dura√ß√£o da anima√ß√£o do voo aleat√≥ria (8 a 13 segundos)
    bat.style.setProperty('--animation-duration', `${Math.random() * 5 + 8}s`);
    // Atraso inicial negativo para que os morcegos apare√ßam em momentos diferentes desde o in√≠cio
    bat.style.animationDelay = `-${Math.random() * 5}s`;

    // Quando a anima√ß√£o de um morcego termina, ele √© removido e um novo √© criado
    // Isso cria um ciclo cont√≠nuo de morcegos voando
    bat.addEventListener('animationend', () => {
        bat.remove(); // Remove o morcego atual do DOM
        createBat(); // Cria um novo morcego para continuar a anima√ß√£o
    });
}

// Cria o n√∫mero inicial de morcegos ao carregar a p√°gina
for (let i = 0; i < numberOfBats; i++) {
    createBat();
}

// ===============================================
// FUNCIONALIDADE DOS BOT√ïES
// ===============================================

// Event listener para o bot√£o "Ver Fotos da Festa"
document.getElementById('photosBtn').addEventListener('click', () => {
    // Exibe uma mensagem tempor√°ria
    showMessage('Aqui voc√™ veria as fotos da festa! üì∏ (Funcionalidade a ser implementada)');
    // Para realmente levar para uma p√°gina de fotos, voc√™ usaria:
    // window.location.href = 'fotos.html';
});

// Event listener para o bot√£o "Votar na Melhor Fantasia"
document.getElementById('voteBtn').addEventListener('click', () => {
    // Exibe uma mensagem tempor√°ria
    showMessage('Aqui voc√™ seria levado ao formul√°rio de vota√ß√£o! üó≥Ô∏è (Funcionalidade a ser implementada)');
    // Para realmente levar para uma p√°gina de vota√ß√£o, voc√™ usaria:
    // window.location.href = 'votacao.html';
});
